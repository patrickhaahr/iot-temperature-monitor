Project Overview: Temperature Monitor IoT Project for ESP32

Sensor Data Acquisition:

Use a DS18B20 sensor to measure temperature data.
Read and update the temperature periodically using the OneWire and DallasTemperature libraries.
WiFi Configuration:

On startup, the ESP32 checks for a stored WiFi configuration file (e.g., "wifi.json") in SPIFFS.
If the file exists, the device reads the saved SSID and password and connects to WiFi.
If the file does not exist, the device starts in Access Point (AP) mode (e.g., "ESP32_Config") so the user can provide the WiFi credentials.
The received credentials are then saved to SPIFFS for future restarts.
Web Server & WebSocket Communication:

Implement a web server using ESPAsyncWebServer to serve the client-side interface.
Provide a WebSocket endpoint (e.g., "/ws") to push real-time temperature updates to connected clients.
Client-Side Interface:

The web page (HTML/JS) displays the temperature data in real time.
Styling should be done with Tailwind CSS (instead of Bootstrap).
The static files (HTML, JavaScript, and any CSS files) will be stored in a dedicated "data" folder, which is uploaded to the ESP32’s SPIFFS (using commands like pio run -t uploadfs).
Reset Button Functionality:

Monitor a hardware button.
If the button is held for 10 seconds, delete the WiFi configuration file from SPIFFS and restart the device.
Project Structure & Files:

platformio.ini: Contains build settings and library dependencies.
src/main.cpp: The main entry point that initializes all modules (WiFi, sensor, web server, reset functionality) and ties everything together.
lib/ directory containing modular components such as:
WiFiManager: Handles reading/writing WiFi configuration and AP mode.
SensorManager: Manages DS18B20 sensor initialization and temperature reading.
WebServerManager: Sets up the web server and WebSocket endpoint.
ResetManager: Monitors the reset button and handles configuration resets.
data/ directory for static client-side files:
index.html: The main HTML page that connects to the WebSocket and displays temperature data. Style with tailwindcss
main.js: JavaScript that handles WebSocket communication and DOM updates.

Modular Code Organization:

Structure your project into separate modules (WiFi, Sensor, Web Server, Reset Button) to make your code more maintainable and easier to debug.
Consistent Naming and Formatting:

Use clear, descriptive names for functions, variables, and files.
Follow consistent code formatting and indentation throughout your project.
Documentation:

Use Doxygen-style comments in your source code to generate clear, structured documentation.
Maintain a README that explains your project structure, dependencies, and setup instructions.
Error Handling:

Check for errors when mounting SPIFFS, reading files, or connecting to WiFi.
Handle sensor reading failures gracefully, ensuring that the system remains robust.
Hardware Considerations:

Verify that your pin assignments (for the DS18B20 sensor, reset button, etc.) match your actual hardware configuration.
Debounce your reset button to avoid false triggers, and ensure that holding it for 10 seconds reliably resets your configuration.
Security and Data Integrity:

Safely store and retrieve WiFi credentials using SPIFFS.
Ensure that your AP mode (for initial configuration) is secure, even if it’s just temporary.
Responsive Client-Side Interface:

Serve your static HTML, JavaScript, and Tailwind CSS files from the “data” folder on SPIFFS.
Make sure your client-side code properly handles WebSocket reconnections and displays data in real time.
Testing and Validation:

Test each module individually before integrating them.
Use the PlatformIO CLI commands (e.g., pio run, pio run -t upload, pio device monitor) to build, upload, and monitor your project.
Documentation of Hardware Setup:

Create a Fritzing diagram of your hardware connections (ESP32, DS18B20 sensor, button, etc.) to complement your source code documentation.